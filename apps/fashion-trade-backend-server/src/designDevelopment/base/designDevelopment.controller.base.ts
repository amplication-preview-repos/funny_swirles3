/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DesignDevelopmentService } from "../designDevelopment.service";
import { DesignDevelopmentCreateInput } from "./DesignDevelopmentCreateInput";
import { DesignDevelopment } from "./DesignDevelopment";
import { DesignDevelopmentFindManyArgs } from "./DesignDevelopmentFindManyArgs";
import { DesignDevelopmentWhereUniqueInput } from "./DesignDevelopmentWhereUniqueInput";
import { DesignDevelopmentUpdateInput } from "./DesignDevelopmentUpdateInput";
import { ProductionFindManyArgs } from "../../production/base/ProductionFindManyArgs";
import { Production } from "../../production/base/Production";
import { ProductionWhereUniqueInput } from "../../production/base/ProductionWhereUniqueInput";

export class DesignDevelopmentControllerBase {
  constructor(protected readonly service: DesignDevelopmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DesignDevelopment })
  async createDesignDevelopment(
    @common.Body() data: DesignDevelopmentCreateInput
  ): Promise<DesignDevelopment> {
    return await this.service.createDesignDevelopment({
      data: {
        ...data,

        client: data.client
          ? {
              connect: data.client,
            }
          : undefined,

        supplier: data.supplier
          ? {
              connect: data.supplier,
            }
          : undefined,
      },
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        status: true,

        supplier: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DesignDevelopment] })
  @ApiNestedQuery(DesignDevelopmentFindManyArgs)
  async designDevelopments(
    @common.Req() request: Request
  ): Promise<DesignDevelopment[]> {
    const args = plainToClass(DesignDevelopmentFindManyArgs, request.query);
    return this.service.designDevelopments({
      ...args,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        status: true,

        supplier: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DesignDevelopment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async designDevelopment(
    @common.Param() params: DesignDevelopmentWhereUniqueInput
  ): Promise<DesignDevelopment | null> {
    const result = await this.service.designDevelopment({
      where: params,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        status: true,

        supplier: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DesignDevelopment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDesignDevelopment(
    @common.Param() params: DesignDevelopmentWhereUniqueInput,
    @common.Body() data: DesignDevelopmentUpdateInput
  ): Promise<DesignDevelopment | null> {
    try {
      return await this.service.updateDesignDevelopment({
        where: params,
        data: {
          ...data,

          client: data.client
            ? {
                connect: data.client,
              }
            : undefined,

          supplier: data.supplier
            ? {
                connect: data.supplier,
              }
            : undefined,
        },
        select: {
          client: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,
          status: true,

          supplier: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DesignDevelopment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDesignDevelopment(
    @common.Param() params: DesignDevelopmentWhereUniqueInput
  ): Promise<DesignDevelopment | null> {
    try {
      return await this.service.deleteDesignDevelopment({
        where: params,
        select: {
          client: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,
          status: true,

          supplier: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/productions")
  @ApiNestedQuery(ProductionFindManyArgs)
  async findProductions(
    @common.Req() request: Request,
    @common.Param() params: DesignDevelopmentWhereUniqueInput
  ): Promise<Production[]> {
    const query = plainToClass(ProductionFindManyArgs, request.query);
    const results = await this.service.findProductions(params.id, {
      ...query,
      select: {
        createdAt: true,

        designDevelopment: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productions")
  async connectProductions(
    @common.Param() params: DesignDevelopmentWhereUniqueInput,
    @common.Body() body: ProductionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productions: {
        connect: body,
      },
    };
    await this.service.updateDesignDevelopment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productions")
  async updateProductions(
    @common.Param() params: DesignDevelopmentWhereUniqueInput,
    @common.Body() body: ProductionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productions: {
        set: body,
      },
    };
    await this.service.updateDesignDevelopment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productions")
  async disconnectProductions(
    @common.Param() params: DesignDevelopmentWhereUniqueInput,
    @common.Body() body: ProductionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productions: {
        disconnect: body,
      },
    };
    await this.service.updateDesignDevelopment({
      where: params,
      data,
      select: { id: true },
    });
  }
}
