/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Production as PrismaProduction,
  DesignDevelopment as PrismaDesignDevelopment,
} from "@prisma/client";

export class ProductionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProductionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.production.count(args);
  }

  async productions(
    args: Prisma.ProductionFindManyArgs
  ): Promise<PrismaProduction[]> {
    return this.prisma.production.findMany(args);
  }
  async production(
    args: Prisma.ProductionFindUniqueArgs
  ): Promise<PrismaProduction | null> {
    return this.prisma.production.findUnique(args);
  }
  async createProduction(
    args: Prisma.ProductionCreateArgs
  ): Promise<PrismaProduction> {
    return this.prisma.production.create(args);
  }
  async updateProduction(
    args: Prisma.ProductionUpdateArgs
  ): Promise<PrismaProduction> {
    return this.prisma.production.update(args);
  }
  async deleteProduction(
    args: Prisma.ProductionDeleteArgs
  ): Promise<PrismaProduction> {
    return this.prisma.production.delete(args);
  }

  async getDesignDevelopment(
    parentId: string
  ): Promise<PrismaDesignDevelopment | null> {
    return this.prisma.production
      .findUnique({
        where: { id: parentId },
      })
      .designDevelopment();
  }
}
