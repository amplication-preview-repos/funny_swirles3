/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DesignDevelopment } from "./DesignDevelopment";
import { DesignDevelopmentCountArgs } from "./DesignDevelopmentCountArgs";
import { DesignDevelopmentFindManyArgs } from "./DesignDevelopmentFindManyArgs";
import { DesignDevelopmentFindUniqueArgs } from "./DesignDevelopmentFindUniqueArgs";
import { CreateDesignDevelopmentArgs } from "./CreateDesignDevelopmentArgs";
import { UpdateDesignDevelopmentArgs } from "./UpdateDesignDevelopmentArgs";
import { DeleteDesignDevelopmentArgs } from "./DeleteDesignDevelopmentArgs";
import { ProductionFindManyArgs } from "../../production/base/ProductionFindManyArgs";
import { Production } from "../../production/base/Production";
import { Client } from "../../client/base/Client";
import { Supplier } from "../../supplier/base/Supplier";
import { DesignDevelopmentService } from "../designDevelopment.service";
@graphql.Resolver(() => DesignDevelopment)
export class DesignDevelopmentResolverBase {
  constructor(protected readonly service: DesignDevelopmentService) {}

  async _designDevelopmentsMeta(
    @graphql.Args() args: DesignDevelopmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DesignDevelopment])
  async designDevelopments(
    @graphql.Args() args: DesignDevelopmentFindManyArgs
  ): Promise<DesignDevelopment[]> {
    return this.service.designDevelopments(args);
  }

  @graphql.Query(() => DesignDevelopment, { nullable: true })
  async designDevelopment(
    @graphql.Args() args: DesignDevelopmentFindUniqueArgs
  ): Promise<DesignDevelopment | null> {
    const result = await this.service.designDevelopment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DesignDevelopment)
  async createDesignDevelopment(
    @graphql.Args() args: CreateDesignDevelopmentArgs
  ): Promise<DesignDevelopment> {
    return await this.service.createDesignDevelopment({
      ...args,
      data: {
        ...args.data,

        client: args.data.client
          ? {
              connect: args.data.client,
            }
          : undefined,

        supplier: args.data.supplier
          ? {
              connect: args.data.supplier,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => DesignDevelopment)
  async updateDesignDevelopment(
    @graphql.Args() args: UpdateDesignDevelopmentArgs
  ): Promise<DesignDevelopment | null> {
    try {
      return await this.service.updateDesignDevelopment({
        ...args,
        data: {
          ...args.data,

          client: args.data.client
            ? {
                connect: args.data.client,
              }
            : undefined,

          supplier: args.data.supplier
            ? {
                connect: args.data.supplier,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DesignDevelopment)
  async deleteDesignDevelopment(
    @graphql.Args() args: DeleteDesignDevelopmentArgs
  ): Promise<DesignDevelopment | null> {
    try {
      return await this.service.deleteDesignDevelopment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Production], { name: "productions" })
  async findProductions(
    @graphql.Parent() parent: DesignDevelopment,
    @graphql.Args() args: ProductionFindManyArgs
  ): Promise<Production[]> {
    const results = await this.service.findProductions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Client, {
    nullable: true,
    name: "client",
  })
  async getClient(
    @graphql.Parent() parent: DesignDevelopment
  ): Promise<Client | null> {
    const result = await this.service.getClient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Supplier, {
    nullable: true,
    name: "supplier",
  })
  async getSupplier(
    @graphql.Parent() parent: DesignDevelopment
  ): Promise<Supplier | null> {
    const result = await this.service.getSupplier(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
