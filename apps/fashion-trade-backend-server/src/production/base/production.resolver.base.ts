/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Production } from "./Production";
import { ProductionCountArgs } from "./ProductionCountArgs";
import { ProductionFindManyArgs } from "./ProductionFindManyArgs";
import { ProductionFindUniqueArgs } from "./ProductionFindUniqueArgs";
import { CreateProductionArgs } from "./CreateProductionArgs";
import { UpdateProductionArgs } from "./UpdateProductionArgs";
import { DeleteProductionArgs } from "./DeleteProductionArgs";
import { DesignDevelopment } from "../../designDevelopment/base/DesignDevelopment";
import { ProductionService } from "../production.service";
@graphql.Resolver(() => Production)
export class ProductionResolverBase {
  constructor(protected readonly service: ProductionService) {}

  async _productionsMeta(
    @graphql.Args() args: ProductionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Production])
  async productions(
    @graphql.Args() args: ProductionFindManyArgs
  ): Promise<Production[]> {
    return this.service.productions(args);
  }

  @graphql.Query(() => Production, { nullable: true })
  async production(
    @graphql.Args() args: ProductionFindUniqueArgs
  ): Promise<Production | null> {
    const result = await this.service.production(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Production)
  async createProduction(
    @graphql.Args() args: CreateProductionArgs
  ): Promise<Production> {
    return await this.service.createProduction({
      ...args,
      data: {
        ...args.data,

        designDevelopment: args.data.designDevelopment
          ? {
              connect: args.data.designDevelopment,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Production)
  async updateProduction(
    @graphql.Args() args: UpdateProductionArgs
  ): Promise<Production | null> {
    try {
      return await this.service.updateProduction({
        ...args,
        data: {
          ...args.data,

          designDevelopment: args.data.designDevelopment
            ? {
                connect: args.data.designDevelopment,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Production)
  async deleteProduction(
    @graphql.Args() args: DeleteProductionArgs
  ): Promise<Production | null> {
    try {
      return await this.service.deleteProduction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => DesignDevelopment, {
    nullable: true,
    name: "designDevelopment",
  })
  async getDesignDevelopment(
    @graphql.Parent() parent: Production
  ): Promise<DesignDevelopment | null> {
    const result = await this.service.getDesignDevelopment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
