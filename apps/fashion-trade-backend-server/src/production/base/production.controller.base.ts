/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductionService } from "../production.service";
import { ProductionCreateInput } from "./ProductionCreateInput";
import { Production } from "./Production";
import { ProductionFindManyArgs } from "./ProductionFindManyArgs";
import { ProductionWhereUniqueInput } from "./ProductionWhereUniqueInput";
import { ProductionUpdateInput } from "./ProductionUpdateInput";

export class ProductionControllerBase {
  constructor(protected readonly service: ProductionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Production })
  async createProduction(
    @common.Body() data: ProductionCreateInput
  ): Promise<Production> {
    return await this.service.createProduction({
      data: {
        ...data,

        designDevelopment: data.designDevelopment
          ? {
              connect: data.designDevelopment,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        designDevelopment: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Production] })
  @ApiNestedQuery(ProductionFindManyArgs)
  async productions(@common.Req() request: Request): Promise<Production[]> {
    const args = plainToClass(ProductionFindManyArgs, request.query);
    return this.service.productions({
      ...args,
      select: {
        createdAt: true,

        designDevelopment: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Production })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async production(
    @common.Param() params: ProductionWhereUniqueInput
  ): Promise<Production | null> {
    const result = await this.service.production({
      where: params,
      select: {
        createdAt: true,

        designDevelopment: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Production })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProduction(
    @common.Param() params: ProductionWhereUniqueInput,
    @common.Body() data: ProductionUpdateInput
  ): Promise<Production | null> {
    try {
      return await this.service.updateProduction({
        where: params,
        data: {
          ...data,

          designDevelopment: data.designDevelopment
            ? {
                connect: data.designDevelopment,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          designDevelopment: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Production })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProduction(
    @common.Param() params: ProductionWhereUniqueInput
  ): Promise<Production | null> {
    try {
      return await this.service.deleteProduction({
        where: params,
        select: {
          createdAt: true,

          designDevelopment: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
