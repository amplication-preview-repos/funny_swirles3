/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProductionProcess as PrismaProductionProcess,
  Sample as PrismaSample,
  Client as PrismaClient,
  Supplier as PrismaSupplier,
} from "@prisma/client";

export class ProductionProcessServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProductionProcessCountArgs, "select">
  ): Promise<number> {
    return this.prisma.productionProcess.count(args);
  }

  async productionProcesses(
    args: Prisma.ProductionProcessFindManyArgs
  ): Promise<PrismaProductionProcess[]> {
    return this.prisma.productionProcess.findMany(args);
  }
  async productionProcess(
    args: Prisma.ProductionProcessFindUniqueArgs
  ): Promise<PrismaProductionProcess | null> {
    return this.prisma.productionProcess.findUnique(args);
  }
  async createProductionProcess(
    args: Prisma.ProductionProcessCreateArgs
  ): Promise<PrismaProductionProcess> {
    return this.prisma.productionProcess.create(args);
  }
  async updateProductionProcess(
    args: Prisma.ProductionProcessUpdateArgs
  ): Promise<PrismaProductionProcess> {
    return this.prisma.productionProcess.update(args);
  }
  async deleteProductionProcess(
    args: Prisma.ProductionProcessDeleteArgs
  ): Promise<PrismaProductionProcess> {
    return this.prisma.productionProcess.delete(args);
  }

  async findSamples(
    parentId: string,
    args: Prisma.SampleFindManyArgs
  ): Promise<PrismaSample[]> {
    return this.prisma.productionProcess
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .samples(args);
  }

  async getClient(parentId: string): Promise<PrismaClient | null> {
    return this.prisma.productionProcess
      .findUnique({
        where: { id: parentId },
      })
      .client();
  }

  async getSupplier(parentId: string): Promise<PrismaSupplier | null> {
    return this.prisma.productionProcess
      .findUnique({
        where: { id: parentId },
      })
      .supplier();
  }
}
