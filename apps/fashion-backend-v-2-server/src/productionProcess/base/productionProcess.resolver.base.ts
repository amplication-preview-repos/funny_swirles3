/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProductionProcess } from "./ProductionProcess";
import { ProductionProcessCountArgs } from "./ProductionProcessCountArgs";
import { ProductionProcessFindManyArgs } from "./ProductionProcessFindManyArgs";
import { ProductionProcessFindUniqueArgs } from "./ProductionProcessFindUniqueArgs";
import { CreateProductionProcessArgs } from "./CreateProductionProcessArgs";
import { UpdateProductionProcessArgs } from "./UpdateProductionProcessArgs";
import { DeleteProductionProcessArgs } from "./DeleteProductionProcessArgs";
import { SampleFindManyArgs } from "../../sample/base/SampleFindManyArgs";
import { Sample } from "../../sample/base/Sample";
import { Client } from "../../client/base/Client";
import { Supplier } from "../../supplier/base/Supplier";
import { ProductionProcessService } from "../productionProcess.service";
@graphql.Resolver(() => ProductionProcess)
export class ProductionProcessResolverBase {
  constructor(protected readonly service: ProductionProcessService) {}

  async _productionProcessesMeta(
    @graphql.Args() args: ProductionProcessCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductionProcess])
  async productionProcesses(
    @graphql.Args() args: ProductionProcessFindManyArgs
  ): Promise<ProductionProcess[]> {
    return this.service.productionProcesses(args);
  }

  @graphql.Query(() => ProductionProcess, { nullable: true })
  async productionProcess(
    @graphql.Args() args: ProductionProcessFindUniqueArgs
  ): Promise<ProductionProcess | null> {
    const result = await this.service.productionProcess(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductionProcess)
  async createProductionProcess(
    @graphql.Args() args: CreateProductionProcessArgs
  ): Promise<ProductionProcess> {
    return await this.service.createProductionProcess({
      ...args,
      data: {
        ...args.data,

        client: args.data.client
          ? {
              connect: args.data.client,
            }
          : undefined,

        supplier: args.data.supplier
          ? {
              connect: args.data.supplier,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ProductionProcess)
  async updateProductionProcess(
    @graphql.Args() args: UpdateProductionProcessArgs
  ): Promise<ProductionProcess | null> {
    try {
      return await this.service.updateProductionProcess({
        ...args,
        data: {
          ...args.data,

          client: args.data.client
            ? {
                connect: args.data.client,
              }
            : undefined,

          supplier: args.data.supplier
            ? {
                connect: args.data.supplier,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductionProcess)
  async deleteProductionProcess(
    @graphql.Args() args: DeleteProductionProcessArgs
  ): Promise<ProductionProcess | null> {
    try {
      return await this.service.deleteProductionProcess(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Sample], { name: "samples" })
  async findSamples(
    @graphql.Parent() parent: ProductionProcess,
    @graphql.Args() args: SampleFindManyArgs
  ): Promise<Sample[]> {
    const results = await this.service.findSamples(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Client, {
    nullable: true,
    name: "client",
  })
  async getClient(
    @graphql.Parent() parent: ProductionProcess
  ): Promise<Client | null> {
    const result = await this.service.getClient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Supplier, {
    nullable: true,
    name: "supplier",
  })
  async getSupplier(
    @graphql.Parent() parent: ProductionProcess
  ): Promise<Supplier | null> {
    const result = await this.service.getSupplier(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
