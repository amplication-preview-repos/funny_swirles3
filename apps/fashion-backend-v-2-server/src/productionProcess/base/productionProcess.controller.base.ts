/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductionProcessService } from "../productionProcess.service";
import { ProductionProcessCreateInput } from "./ProductionProcessCreateInput";
import { ProductionProcess } from "./ProductionProcess";
import { ProductionProcessFindManyArgs } from "./ProductionProcessFindManyArgs";
import { ProductionProcessWhereUniqueInput } from "./ProductionProcessWhereUniqueInput";
import { ProductionProcessUpdateInput } from "./ProductionProcessUpdateInput";
import { SampleFindManyArgs } from "../../sample/base/SampleFindManyArgs";
import { Sample } from "../../sample/base/Sample";
import { SampleWhereUniqueInput } from "../../sample/base/SampleWhereUniqueInput";

export class ProductionProcessControllerBase {
  constructor(protected readonly service: ProductionProcessService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductionProcess })
  async createProductionProcess(
    @common.Body() data: ProductionProcessCreateInput
  ): Promise<ProductionProcess> {
    return await this.service.createProductionProcess({
      data: {
        ...data,

        client: data.client
          ? {
              connect: data.client,
            }
          : undefined,

        supplier: data.supplier
          ? {
              connect: data.supplier,
            }
          : undefined,
      },
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        stage: true,

        supplier: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductionProcess] })
  @ApiNestedQuery(ProductionProcessFindManyArgs)
  async productionProcesses(
    @common.Req() request: Request
  ): Promise<ProductionProcess[]> {
    const args = plainToClass(ProductionProcessFindManyArgs, request.query);
    return this.service.productionProcesses({
      ...args,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        stage: true,

        supplier: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductionProcess })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async productionProcess(
    @common.Param() params: ProductionProcessWhereUniqueInput
  ): Promise<ProductionProcess | null> {
    const result = await this.service.productionProcess({
      where: params,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        stage: true,

        supplier: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductionProcess })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProductionProcess(
    @common.Param() params: ProductionProcessWhereUniqueInput,
    @common.Body() data: ProductionProcessUpdateInput
  ): Promise<ProductionProcess | null> {
    try {
      return await this.service.updateProductionProcess({
        where: params,
        data: {
          ...data,

          client: data.client
            ? {
                connect: data.client,
              }
            : undefined,

          supplier: data.supplier
            ? {
                connect: data.supplier,
              }
            : undefined,
        },
        select: {
          client: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,
          stage: true,

          supplier: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductionProcess })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProductionProcess(
    @common.Param() params: ProductionProcessWhereUniqueInput
  ): Promise<ProductionProcess | null> {
    try {
      return await this.service.deleteProductionProcess({
        where: params,
        select: {
          client: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,
          stage: true,

          supplier: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/samples")
  @ApiNestedQuery(SampleFindManyArgs)
  async findSamples(
    @common.Req() request: Request,
    @common.Param() params: ProductionProcessWhereUniqueInput
  ): Promise<Sample[]> {
    const query = plainToClass(SampleFindManyArgs, request.query);
    const results = await this.service.findSamples(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        name: true,

        productionProcess: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/samples")
  async connectSamples(
    @common.Param() params: ProductionProcessWhereUniqueInput,
    @common.Body() body: SampleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      samples: {
        connect: body,
      },
    };
    await this.service.updateProductionProcess({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/samples")
  async updateSamples(
    @common.Param() params: ProductionProcessWhereUniqueInput,
    @common.Body() body: SampleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      samples: {
        set: body,
      },
    };
    await this.service.updateProductionProcess({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/samples")
  async disconnectSamples(
    @common.Param() params: ProductionProcessWhereUniqueInput,
    @common.Body() body: SampleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      samples: {
        disconnect: body,
      },
    };
    await this.service.updateProductionProcess({
      where: params,
      data,
      select: { id: true },
    });
  }
}
