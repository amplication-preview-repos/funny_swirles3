/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DesignDevelopment as PrismaDesignDevelopment,
  Production as PrismaProduction,
  Client as PrismaClient,
  Supplier as PrismaSupplier,
} from "@prisma/client";

export class DesignDevelopmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DesignDevelopmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.designDevelopment.count(args);
  }

  async designDevelopments(
    args: Prisma.DesignDevelopmentFindManyArgs
  ): Promise<PrismaDesignDevelopment[]> {
    return this.prisma.designDevelopment.findMany(args);
  }
  async designDevelopment(
    args: Prisma.DesignDevelopmentFindUniqueArgs
  ): Promise<PrismaDesignDevelopment | null> {
    return this.prisma.designDevelopment.findUnique(args);
  }
  async createDesignDevelopment(
    args: Prisma.DesignDevelopmentCreateArgs
  ): Promise<PrismaDesignDevelopment> {
    return this.prisma.designDevelopment.create(args);
  }
  async updateDesignDevelopment(
    args: Prisma.DesignDevelopmentUpdateArgs
  ): Promise<PrismaDesignDevelopment> {
    return this.prisma.designDevelopment.update(args);
  }
  async deleteDesignDevelopment(
    args: Prisma.DesignDevelopmentDeleteArgs
  ): Promise<PrismaDesignDevelopment> {
    return this.prisma.designDevelopment.delete(args);
  }

  async findProductions(
    parentId: string,
    args: Prisma.ProductionFindManyArgs
  ): Promise<PrismaProduction[]> {
    return this.prisma.designDevelopment
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productions(args);
  }

  async getClient(parentId: string): Promise<PrismaClient | null> {
    return this.prisma.designDevelopment
      .findUnique({
        where: { id: parentId },
      })
      .client();
  }

  async getSupplier(parentId: string): Promise<PrismaSupplier | null> {
    return this.prisma.designDevelopment
      .findUnique({
        where: { id: parentId },
      })
      .supplier();
  }
}
